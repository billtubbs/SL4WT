% Test model setup, prediction and update functions for
% the ensemble model.
%

clear all

addpath("yaml")
addpath("plot-utils")

test_dir = "tests";
test_data_dir = "data";


%% Test initialization with data

Load = [50 100 150]';
Power = [35.05 70.18 104.77]';
data = table(Load, Power);

model_1 = struct;
model_1.setupFcn = "lin_model_setup";
model_1.predictFcn = "lin_model_predict";
model_1.updateFcn = "lin_model_update";
model_1.params.predictorNames = "Load";
model_1.params.responseNames = "Power";
model_1.params.significance = 0.1;

model_2 = struct;
model_2.setupFcn = "fit_model_setup";
model_2.predictFcn = "fit_model_predict";
model_2.updateFcn = "fit_model_update";
model_2.params.predictorNames = "Load";
model_2.params.responseNames = "Power";
model_2.params.significance = 0.1;
model_2.params.fit.fitType = 'poly2';

model_3 = struct;
model_3.setupFcn = "fp1_model_setup";
model_3.predictFcn = "fp1_model_predict";
model_3.updateFcn = "fp1_model_update";
model_3.params.predictorNames = "Load";
model_3.params.responseNames = "Power";
model_3.params.prior.se_sigma = 1;
model_3.params.prior.specific_energy = 0.7;
model_3.params.prior.se_int = [0.5 0.9];
model_3.params.significance = 0.1;

model_4 = struct;
model_4.setupFcn = "gpr_model_setup";
model_4.predictFcn = "gpr_model_predict";
model_4.updateFcn = "gpr_model_update";
model_4.params.predictorNames = "Load";
model_4.params.responseNames = "Power";
model_4.params.fit.KernelFunction = "squaredexponential";
model_4.params.fit.KernelParameters = [15.0, 95.7708];
model_4.params.significance = 0.1;

params = struct;
params.method = "stacking";
params.models.model_1 = model_1;
params.models.model_2 = model_2;
params.models.model_3 = model_3;
params.models.model_4 = model_4;

% Initialize ensemble model
[models, vars] = ens_model_setup(data, params);

assert(isequal(fieldnames(models), ...
    {'model_1', 'model_2', 'model_3', 'model_4'}' ...
));
assert(isequal(fieldnames(vars), ...
    {'model_1', 'model_2', 'model_3', 'model_4'}' ...
));

% Test predictions with single point
x = 200;
[y_mean, y_sigma, y_int] = ens_model_predict(models, x, vars, params);

assert(round(y_mean, 4) == 138.5310);
assert(isequaln(y_sigma, nan));
assert(isequal(round(y_int, 4), [131.9349  141.8462]));


%% Test with config file

% Load configuration file
filepath = fullfile(test_dir, test_data_dir, "test_config_ens.yaml");
config = yaml.loadFile(filepath, "ConvertToArray", true);

% Load training data from file
training_data = struct();
for machine = string(fieldnames(config.machines))'
    filename = config.machines.(machine).trainingData;
    training_data.(machine) = readtable(...
        fullfile(test_dir, test_data_dir, filename) ...
    );
end

% Create model objects by running the setup scripts with 
% the pre-defined model data specified in the config struct
models = struct();
model_vars = struct();

% Test results to compare to
coeffs_chk = struct;
coeffs_chk.machine_1 = struct( ...
    'model_11', [0.595149 14.9863], ...
    'model_12', [0.00115465 0.352075 25.7804], ...
    'model_13', [2.12595e-05 -0.0049403 0.885024 11.2257] ...
);
coeffs_chk.machine_2 = struct( ...
    'model_21', [0.515405 58.1292], ...
    'model_22', [0.000631498 0.0580001 134.338], ...
    'model_23', [-1.02462e-06 0.00173128 -0.319653 175.865] ...
);
coeffs_chk.machine_3 = struct( ...
    'model_31', [0.553714 62.936], ...
    'model_32', [-2.25383e-05 0.575798 58.8723], ...
    'model_33', [-7.68249e-07 0.00113025 0.0540596 126.292] ...
);
coeffs_chk.machine_4 = struct( ...
    'model_31', [0.547135 64.1203], ...
    'model_32', [8.81957e-05 0.457457 80.4354], ...
    'model_33', [-8.43996e-07 0.00122079 0.0266085 128.754] ...
);
coeffs_chk.machine_5 = struct( ...
    'model_31', [0.553347 61.9386], ...
    'model_32', [4.195e-05 0.511507 70.1416], ...
    'model_33', [-7.76119e-07 0.00118508 0.00664429 134.322] ...
);

machine_names = string(fieldnames(config.machines))';
for i = 1:numel(machine_names)
    machine = machine_names(i);
    model_name = config.machines.(machine).model;
    model_config = config.models.(model_name);

    % Run model setup script
    [model, vars] = builtin("feval", ...
        model_config.setupFcn, ...
        training_data.(machine), ...
        model_config.params ...
    );

    % Check sub-model variables and params
    for sub_model_name = string(fieldnames(model_config.params.models))'
        assert(isfield(vars, sub_model_name))
        sub_model_config = model_config.params.models.(sub_model_name);
        assert(vars.(sub_model_name).significance == ...
            sub_model_config.params.significance)
        sub_model = model.(sub_model_name);
        %fprintf("%s, %s: %s\n", machine, sub_model_name, strjoin(string(round(coeffvalues(sub_model), 6, 'significant')'), " "))
        assert(isequal(round(coeffvalues(sub_model), 6, 'significant'), ...
            coeffs_chk.(machine).(sub_model_name)));
    end

    % Save for use below
    models.(machine) = model;
    model_vars.(machine) = vars;

end

% Make predictions with one model
machine = "machine_1";
op_limits = config.machines.(machine).params.op_limits;
model_name = config.machines.(machine).model;
model_config = config.models.(model_name);
x = linspace(op_limits(1), op_limits(2), 101)';
[y_mean, y_sigma, y_int] = builtin("feval", ...
    model_config.predictFcn, ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config.params ...
);

% % Plot predictions and data
% figure(1); clf
% make_statdplot(y_mean, y_int(:, 1), y_int(:, 2), x, training_data.Power, ...
%     training_data.Load, "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs
% Use this command to find these values:
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_mean)
assert(isequal( ...
    round(y_mean, 4), [
   48.8200    49.6991    50.5779    51.4567    52.3357    53.2151 ...
   54.0950    54.9757    55.8572    56.7399    57.6240    58.5095 ...
   59.3966    60.2857    61.1768    62.0701    62.9659    63.8643 ...
   64.7655    65.6697    66.5770    67.4878    68.4021    69.3201 ...
   70.2421    71.1681    72.0985    73.0334    73.9729    74.9174 ...
   75.8668    76.8216    77.7817    78.7475    79.7191    80.6966 ...
   81.6804    82.6705    83.6672    84.6706    85.6809    86.6984 ...
   87.7232    88.7554    89.7954    90.8432    91.8990    92.9631 ...
   94.0357    95.1168    96.2068    97.3058    98.4139    99.5314 ...
  100.6585   101.7953   102.9420   104.0989   105.2661   106.4437 ...
  107.6321   108.8313   110.0415   111.2631   112.4960   113.7406 ...
  114.9969   116.2653   117.5458   118.8388   120.1442   121.4625 ...
  122.7936   124.1379   125.4955   126.8665   128.2513   129.6499 ...
  131.0626   132.4895   133.9309   135.3869   136.8576   138.3434 ...
  139.8444   141.3607   142.8926   144.4403   146.0038   147.5835 ...
  149.1795   150.7920   152.4212   154.0673   155.7304   157.4107 ...
  159.1085   160.8239   162.5571   164.3083   166.0777 ...
]'))
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_sigma)
assert(isequaln(y_sigma, nan(size(x))));  % TODO: Should we produce a y_sigma?

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 1))
assert(isequal( ...
    round(y_int(:, 1), 4), [
   44.5135    45.5133    46.5119    47.5094    48.5057    49.5007 ...
   50.4946    51.4871    52.4785    53.4685    54.4572    55.4447 ...
   56.4308    57.4156    58.3990    59.3811    60.3618    61.3412 ...
   62.3192    63.2958    64.2711    65.2450    66.2175    67.1886 ...
   68.1426    69.0655    69.9974    70.9383    71.8882    72.8472 ...
   73.8152    74.7923    75.7784    76.7735    77.7775    78.7397 ...
   79.6942    80.6474    81.5996    82.5506    83.5005    84.4493 ...
   85.3971    86.3438    87.2895    88.2342    89.1780    90.1208 ...
   91.0627    92.0037    92.9438    93.8830    94.8215    95.7591 ...
   96.6959    97.6320    98.5673    99.5019   100.4358   101.3690 ...
  102.3016   103.2335   104.1647   105.0954   106.0254   106.9549 ...
  107.8838   108.8122   109.7401   110.6674   111.5942   112.5206 ...
  113.4465   114.3719   115.2969   116.2215   117.1456   118.0693 ...
  118.9927   119.9157   120.8382   121.7605   122.6823   123.6039 ...
  124.5251   125.4460   126.3665   127.2868   128.2068   129.1265 ...
  130.0459   130.9650   131.8839   132.8025   133.7209   134.6390 ...
  135.5569   136.4745   137.3920   138.3092   139.2262 ...
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 2))
assert(isequal( ...
    round(y_int(:, 2), 4), [
   52.1159    53.0682    54.0216    54.9763    55.9321    56.8891 ...
   57.8474    58.8069    59.7676    60.7297    61.6930    62.6577 ...
   63.6237    64.5910    65.5596    66.5296    67.5010    68.4737 ...
   69.4478    70.4233    71.4001    72.3783    73.3579    74.3388 ...
   75.3211    76.3047    77.2897    78.2760    79.2636    80.2526 ...
   81.2428    82.2343    83.2271    84.2211    85.2163    86.2128 ...
   87.2104    88.2092    89.2092    90.2103    91.2125    92.2157 ...
   93.2201    94.2254    95.2318    96.2392    97.2475    98.2568 ...
   99.2670   100.2781   101.2900   102.3029   103.3165   104.3310 ...
  105.3463   106.3623   107.3790   108.3965   109.4147   110.4336 ...
  111.4532   112.4734   113.4942   114.5156   115.5377   116.5603 ...
  117.5834   118.6071   119.6314   120.8079   122.1644   123.5337 ...
  124.9157   126.3101   127.7166   129.1352   130.5657   132.0078 ...
  133.4615   134.9266   136.4031   137.8908   139.3897   140.8997 ...
  142.4208   143.9528   145.4957   147.0496   148.6142   150.1897 ...
  151.7759   153.3729   154.9805   156.5989   158.2279   159.8675 ...
  161.5178   163.1787   164.8501   166.5322   168.2248 ...
]'))

% More data points
io_data = array2table([
  145.0000  101.0839
  175.0000  122.2633
  140.0000   97.6366
  205.0000  141.9694
  150.0000  104.5735
  210.0000  144.8131
  120.0000   84.4186
   75.0000   58.6758
   95.0000   69.4629
  170.0000  118.7371
], 'VariableNames', {'Load', 'Power'});

% Add one point to training data
training_data.machine_1 = [
    training_data.(machine);
    io_data(9, :)
];

% Test update function (trivial for GPs)
[models.(machine), model_vars.(machine)] = ens_model_update( ...
    models.(machine), ...
    training_data.(machine), ...
    model_vars.(machine), ...
    model_config.params ...
);

% Check vars updated
for sub_model_name = string(fieldnames(model_config.params.models))'
    sub_model_config = model_config.params.models.(sub_model_name);
    assert(model_vars.(machine).(sub_model_name).significance == ...
        sub_model_config.params.significance)
    sub_model = models.(machine).(sub_model_name);
    % Check the coefficients are not the same now
    assert(~isequal(round(coeffvalues(sub_model), 6, 'significant'), ...
        coeffs_chk.(machine).(sub_model_name)));
end

% Re-do predictions with new model
[y_mean, y_sigma, y_int] = ens_model_predict( ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config.params ...
);

% % Plot predictions and data
% figure(2); clf
% make_statdplot(y_mean, y_int(:, 1), y_int(:, 2), x, training_data.Power', ...
%     training_data.Load', "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs changed
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_mean)
assert(isequal( ...
    round(y_mean, 4), [
   48.7333    49.5927    50.4547    51.3195    52.1871    53.0575 ...
   53.9309    54.8072    55.6866    56.5692    57.4549    58.3439 ...
   59.2363    60.1320    61.0312    61.9339    62.8402    63.7502 ...
   64.6640    65.5815    66.5029    67.4282    68.3576    69.2910 ...
   70.2285    71.1702    72.1163    73.0666    74.0214    74.9806 ...
   75.9444    76.9127    77.8858    78.8636    79.8462    80.8336 ...
   81.8260    82.8235    83.8260    84.8336    85.8465    86.8646 ...
   87.8881    88.9169    89.9513    90.9912    92.0367    93.0879 ...
   94.1449    95.2077    96.2763    97.3509    98.4315    99.5182 ...
  100.6111   101.7101   102.8155   103.9272   105.0453   106.1699 ...
  107.3010   108.4388   109.5833   110.7345   111.8926   113.0575 ...
  114.2294   115.4083   116.5943   117.7875   118.9878   120.1955 ...
  121.4105   122.6330   123.8630   125.1005   126.3456   127.5985 ...
  128.8591   130.1275   131.4038   132.6881   133.9804   135.2808 ...
  136.5894   137.9062   139.2313   140.5648   141.9067   143.2571 ...
  144.6161   145.9837   147.3600   148.7451   150.1390   151.5418 ...
  152.9536   154.3744   155.8044   157.2435   158.6918
]'))

assert(isequaln(y_sigma, nan(size(x))));  % TODO: Should we produce a y_sigma?

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 1))
assert(isequal( ...
    round(y_int(:, 1), 4), ...
    [   ...
   44.1368    45.1347    46.1314    47.1269    48.1212    49.1143 ...
   50.1062    51.0967    52.0860    53.0740    54.0607    55.0460 ...
   56.0300    57.0126    57.9938    58.9736    59.9520    60.9291 ...
   61.9047    62.8789    63.8517    64.8231    65.7930    66.7616 ...
   67.7287    68.6945    69.6588    70.6217    71.5833    72.5435 ...
   73.5024    74.4599    75.4161    76.3710    77.2969    78.2079 ...
   79.1330    80.0734    81.0304    82.0051    82.9987    83.9658 ...
   84.9099    85.8529    86.7948    87.7358    88.6757    89.6146 ...
   90.5525    91.4895    92.4256    93.3608    94.2951    95.2286 ...
   96.1613    97.0931    98.0242    98.9545    99.8841   100.8130 ...
  101.7411   102.6686   103.5954   104.5216   105.4472   106.3722 ...
  107.2966   108.2204   109.1437   110.0664   110.9886   111.9103 ...
  112.8316   113.7523   114.6726   115.5925   116.5119   117.4309 ...
  118.3495   119.2677   120.1855   120.6604   121.0365   121.3814 ...
  121.6945   121.9751   122.2226   122.4363   122.6155   122.7596 ...
  122.8680   122.9399   122.9747   122.9717   122.9303   122.8498 ...
  122.7295   122.5687   122.3667   122.1230   121.8368
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 2))
assert(isequal( ...
    round(y_int(:, 2), 4), ...
    [   ...
   51.8194    52.7659    53.7137    54.6626    55.6128    56.5641 ...
   57.5168    58.4706    59.4258    60.3823    61.3401    62.2992 ...
   63.2597    64.2216    65.1848    66.1494    67.1155    68.0829 ...
   69.0517    70.0220    70.9936    71.9667    72.9412    73.9171 ...
   74.8945    75.8732    76.8533    77.8348    78.8177    79.8019 ...
   80.7875    81.7745    82.7627    83.7523    84.7431    85.7352 ...
   86.7286    87.7231    88.7189    89.7159    90.7140    91.7132 ...
   92.7136    93.7150    94.7175    95.7210    96.7256    97.7311 ...
   98.7376    99.7451   100.7535   101.7627   102.7729   103.7838 ...
  104.7957   105.8083   106.8216   107.8358   108.8507   109.8663 ...
  110.8826   111.8995   112.9172   114.2647   116.0289   117.8479 ...
  119.7207   121.6467   123.6260   125.6589   127.7462   129.8883 ...
  132.0862   134.3407   136.6528   139.0233   141.4533   143.9437 ...
  146.4956   149.1099   151.7878   154.5303   157.3383   160.2131 ...
  163.1555   166.1667   169.2477   172.3997   175.6236   178.9205 ...
  182.2915   185.7377   189.2601   192.8598   196.5379   200.2954 ...
  204.1335   208.0531   212.0555   216.1415   220.3124 ...
]'))


