% Test model setup, prediction and update functions for
% the ensemble model.
%

clear all

addpath("yaml")
addpath("plot-utils")

test_dir = "tests";
test_data_dir = "data";


%% Test initialization with data

% Data from machine_1_data5.csv
Load = [56.0000   62.1555   71.0392   76.0133   80.0000]';
Power = [49.0278   52.2539   55.8558   58.8240   61.2946]';
data = table(Load, Power);

model_1 = struct;
model_1.setupFcn = "lin_model_setup";
model_1.predictFcn = "lin_model_predict";
model_1.updateFcn = "lin_model_update";
model_1.params.predictorNames = "Load";
model_1.params.responseNames = "Power";
model_1.params.significance = 0.1;

model_2 = struct;
model_2.setupFcn = "fit_model_setup";
model_2.predictFcn = "fit_model_predict";
model_2.updateFcn = "fit_model_update";
model_2.params.predictorNames = "Load";
model_2.params.responseNames = "Power";
model_2.params.significance = 0.1;
model_2.params.fit.fitType = 'poly2';

model_3 = struct;
model_3.setupFcn = "fp1_model_setup";
model_3.predictFcn = "fp1_model_predict";
model_3.updateFcn = "fp1_model_update";
model_3.params.predictorNames = "Load";
model_3.params.responseNames = "Power";
model_3.params.prior.se_sigma = 1;
model_3.params.prior.specific_energy = 0.7;
model_3.params.prior.se_int = [0.5 0.9];
model_3.params.significance = 0.1;

model_4 = struct;
model_4.setupFcn = "gpr_model_setup";
model_4.predictFcn = "gpr_model_predict";
model_4.updateFcn = "gpr_model_update";
model_4.params.predictorNames = "Load";
model_4.params.responseNames = "Power";
model_4.params.fit.KernelFunction = "squaredexponential";
model_4.params.fit.KernelParameters = [15.0, 95.7708];
model_4.params.significance = 0.1;

params = struct;
params.method = "stacking";
params.models.model_1 = model_1;
params.models.model_2 = model_2;
params.models.model_3 = model_3;
params.models.model_4 = model_4;
params.significance = 0.1;

% Initialize ensemble model
[models, vars] = ens_model_setup(data, params);

assert(isequal(fieldnames(models), ...
    {'model_1', 'model_2', 'model_3', 'model_4'}' ...
));
assert(isequal(fieldnames(vars), ...
    {'significance', 'model_1', 'model_2', 'model_3', 'model_4'}' ...
));

% Test predictions with single point
x = 200;
[y_mean, y_sigma, y_int] = ens_model_predict(models, x, vars, params);

assert(round(y_mean, 4) == 133.4025);
assert(isequaln(round(y_sigma, 4), 70.7482));
assert(isequal(round(y_int, 4), [53.7420  214.3737]));


%% Test with config file

% Load configuration file
filepath = fullfile(test_dir, test_data_dir, "test_config_ens.yaml");
config = yaml.loadFile(filepath, "ConvertToArray", true);

% Load training data from file
training_data = struct();
for machine = string(fieldnames(config.machines))'
    filename = config.machines.(machine).trainingData;
    training_data.(machine) = readtable(...
        fullfile(test_dir, test_data_dir, filename) ...
    );
end

% Create model objects by running the setup scripts with 
% the pre-defined model data specified in the config struct
models = struct();
model_vars = struct();

% Test results to compare to
coeffs_chk = struct;
coeffs_chk.machine_1 = struct( ...
    'model_11', [0.497573 21.098], ...
    'model_12', [0.00398751 -0.0440226 39.172], ...
    'model_13', [0.00059042 -0.116746 8.11503 -142.963] ...
);
coeffs_chk.machine_2 = struct( ...
    'model_21', [0.515405 58.1292], ...
    'model_22', [0.000631498 0.0580001 134.338], ...
    'model_23', [-1.02462e-06 0.00173128 -0.319653 175.865] ...
);
coeffs_chk.machine_3 = struct( ...
    'model_31', [0.553714 62.936], ...
    'model_32', [-2.25383e-05 0.575798 58.8723], ...
    'model_33', [-7.68249e-07 0.00113025 0.0540596 126.292] ...
);
coeffs_chk.machine_4 = struct( ...
    'model_31', [0.547135 64.1203], ...
    'model_32', [8.81957e-05 0.457457 80.4354], ...
    'model_33', [-8.43996e-07 0.00122079 0.0266085 128.754] ...
);
coeffs_chk.machine_5 = struct( ...
    'model_31', [0.553347 61.9386], ...
    'model_32', [4.195e-05 0.511507 70.1416], ...
    'model_33', [-7.76119e-07 0.00118508 0.00664429 134.322] ...
);

machine_names = string(fieldnames(config.machines))';
for i = 1:numel(machine_names)
    machine = machine_names(i);
    model_name = config.machines.(machine).model;
    model_config = config.models.(model_name);

    % Run model setup script
    [model, vars] = builtin("feval", ...
        model_config.setupFcn, ...
        training_data.(machine), ...
        model_config.params ...
    );

    % Check sub-model variables and params
    for sub_model_name = string(fieldnames(model_config.params.models))'
        assert(isfield(vars, sub_model_name))
        sub_model_config = model_config.params.models.(sub_model_name);
        assert(vars.(sub_model_name).significance == ...
            sub_model_config.params.significance)
        sub_model = model.(sub_model_name);
        %fprintf("%s, %s: %s\n", machine, sub_model_name, strjoin(string(round(coeffvalues(sub_model), 6, 'significant')'), " "))
        assert(isequal(round(coeffvalues(sub_model), 6, 'significant'), ...
            coeffs_chk.(machine).(sub_model_name)));
    end

    % Save for use below
    models.(machine) = model;
    model_vars.(machine) = vars;

end

% Make predictions with one model
machine = "machine_1";
op_limits = config.machines.(machine).params.op_limits;
model_name = config.machines.(machine).model;
model_config = config.models.(model_name);
x = linspace(op_limits(1), op_limits(2), 101)';
[y_mean, y_sigma, y_int] = builtin("feval", ...
    model_config.predictFcn, ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config.params ...
);

% % Plot predictions and data
% figure(1); clf
% make_statdplot(y_mean, y_int(:, 1), y_int(:, 2), x, training_data.Power, ...
%     training_data.Load, "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs
% Use this command to find these values:
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_mean)
assert(isequal( ...
    round(y_mean, 4), [
   49.0746    49.8801    50.6664    51.4389    52.2028    52.9633 ...
   53.7255    54.4946    55.2759    56.0744    56.8955    57.7443 ...
   58.6260    59.5457    60.5088    61.5203    62.5855    63.7095 ...
   64.8976    66.1549    67.4866    68.8979    70.3941    71.9802 ...
   73.6616    75.4433    77.3306    79.3287    81.4427    83.6779 ...
   86.0394    88.5324    91.1622    93.9339    96.8527    99.9238 ...
  103.1524   106.5436   110.1028   113.8350   117.7455   121.8394 ...
  126.1217   130.5961   135.2672   140.1463   145.2564   150.6244 ...
  156.2491   162.0659   167.9449   173.7528   179.4597   185.2256 ...
  191.4046   198.4679   206.8873   217.0071   228.9033   242.2276 ...
  256.0965   269.1626   279.9795   287.5470   291.6876   293.0052 ...
  292.5402   291.4214   290.6844   291.2412   293.9242   299.5499 ...
  308.9775   323.1495   343.0869   369.7921   403.9966   445.7160 ...
  493.7169   545.2479   596.5151   643.9617   685.5897   721.3669 ...
  752.5946   780.9306   807.7090   833.7032   859.1619   883.9203 ...
  907.4783   929.0192   947.3914   961.0969   968.3420   967.2129 ...
  956.0164   933.7621   900.6486   858.3306   809.7742 ...
]'))
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_sigma)
assert(isequaln( ...
    round(y_sigma, 4), [
    0.8041     0.6465     0.6627     0.7093     0.7276     0.7119 ...
    0.6761     0.6406     0.6222     0.6228     0.6283     0.6189 ...
    0.5861     0.5538     0.6242     0.9188     1.4463     2.1830 ...
    3.1292     4.2987     5.7089     7.3799     9.3327    11.5873 ...
   14.1662    17.0896    20.3766    24.0507    28.1300    32.6287 ...
   37.5782    42.9874    48.8873    55.2800    62.2205    69.6839 ...
   77.7229    86.3671    95.5931   105.4216   115.9693   127.1697 ...
  138.9948   151.3708   164.3784   178.5865   195.4971   172.3638 ...
  187.5443   202.5337   214.6369   260.7244   253.7021   250.1451 ...
  254.4001   273.6462   320.3550   353.2650   497.6464   317.9170 ...
  384.1747   440.0113   468.9191   460.0520   414.5294   610.4646 ...
  463.2069   306.0019   212.7310   167.4090   139.2708   125.6702 ...
  131.5159   161.6190   221.1419   342.5073   672.8824  1304.5388 ...
 1032.6399  1693.0510  2478.6626  3398.2666  4625.3467        NaN ...
       NaN        NaN        NaN        NaN        NaN        NaN ...
       NaN  8108.2313  6739.4048  5918.4899  5191.6049  4453.0806 ...
 3649.3435  2736.8875  1903.9678  2228.2845  1159.7396 ...
 ]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 1))
assert(isequaln( ...
    round(y_int(:, 1), 4), [
   48.1508    49.1219    49.9371    50.6942    51.4311    52.1699 ...
   52.9254    53.6985    54.4830    55.2818    56.1125    56.9954 ...
   57.9344    58.8903    59.7792    60.5457    61.2359    61.8862 ...
   62.5044    63.0882    63.6320    64.1268    64.5685    64.9502 ...
   65.2785    65.5551    65.7818    65.9602    66.0891    66.1614 ...
   66.1881    66.1601    66.0768    65.9447    65.7517    65.5048 ...
   65.2117    64.8372    64.4350    63.9532    63.4029    62.8263 ...
   62.1778    61.4405    60.6849    59.8803    58.8199    57.4372 ...
   55.8121    54.3798    54.0551    55.1696    57.6035    60.1827 ...
   61.5450    60.3443    54.5016    39.1701   -17.7350  -137.7714 ...
 -271.1523  -381.9671  -420.7135  -357.5141  -204.8463    -3.4308 ...
   55.8321    80.5058    93.0377    93.3390    93.3932    93.1949 ...
   92.7179    91.9070    90.6631    88.8147    52.9057  -207.3076 ...
-1115.5711 -3034.3493        NaN        NaN        NaN        NaN ...
       NaN        NaN        NaN        NaN        NaN        NaN ...
       NaN        NaN        NaN        NaN        NaN        NaN ...
       NaN -3851.5170 -1802.2695  -138.1173    60.2713 ...
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 2))
assert(isequaln( ...
    round(y_int(:, 2), 4), [
   50.0154    50.6547    51.4271    52.2198    52.9814    53.7125 ...
   54.4335    55.1673    55.9301    56.7250    57.5449    58.3844 ...
   59.2509    60.1783    61.2613    62.6449    64.3595    66.4078 ...
   68.8228    71.6277    74.8419    78.4897    82.6000    87.2039 ...
   92.3333    98.0203   104.2971   111.1960   118.7493   126.9892 ...
  135.9482   145.6584   156.1522   167.4618   179.6197   192.6581 ...
  206.6093   221.5056   237.3794   254.2630   272.1892   291.1897 ...
  311.2881   332.4917   354.8298   378.4780   403.8540   431.3973 ...
  460.9053   490.8016   518.1685   540.1663   556.3496   570.4387 ...
  590.3607   626.5700   689.3659   786.1610   919.2825  1083.7139 ...
 1262.6389  1420.6650  1508.3209  1495.7599  1395.4905  1236.1881 ...
 1038.2528   812.7293   568.1074   321.2460   244.7855   232.4010 ...
  237.0603   263.5271   441.8536   914.8546  1511.7109  2253.3346 ...
 3241.8824  5243.1645        NaN        NaN        NaN        NaN ...
       NaN        NaN        NaN        NaN        NaN        NaN ...
       NaN        NaN        NaN        NaN        NaN        NaN ...
       NaN  7960.7974  6042.1653  4458.2679  2782.2744 ...
]'))
%TODO: Where are these NaNs coming from?

% More data points
io_data = array2table([
  145.0000  101.0839
  175.0000  122.2633
  140.0000   97.6366
  205.0000  141.9694
  150.0000  104.5735
  210.0000  144.8131
  120.0000   84.4186
   75.0000   58.6758
   95.0000   69.4629
  170.0000  118.7371
], 'VariableNames', {'Load', 'Power'});

% Add one point to training data
training_data.machine_1 = [
    training_data.(machine);
    io_data(9, :)
];

% Test update function (trivial for GPs)
[models.(machine), model_vars.(machine)] = ens_model_update( ...
    models.(machine), ...
    training_data.(machine), ...
    model_vars.(machine), ...
    model_config.params ...
);

% Check vars updated
for sub_model_name = string(fieldnames(model_config.params.models))'
    sub_model_config = model_config.params.models.(sub_model_name);
    assert(model_vars.(machine).(sub_model_name).significance == ...
        sub_model_config.params.significance)
    sub_model = models.(machine).(sub_model_name);
    % Check the coefficients are not the same now
    assert(~isequal(round(coeffvalues(sub_model), 6, 'significant'), ...
        coeffs_chk.(machine).(sub_model_name)));
end

% Re-do predictions with new model
[y_mean, y_sigma, y_int] = ens_model_predict( ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config.params ...
);

% % Plot predictions and data
% figure(2); clf
% make_statdplot(y_mean, y_int(:, 1), y_int(:, 2), x, training_data.Power', ...
%     training_data.Load', "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs changed
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_mean)
assert(isequal( ...
    round(y_mean, 4), [
   48.9979    49.7619    50.5361    51.3209    52.1159    52.9205 ...
   53.7345    54.5574    55.3889    56.2286    57.0762    57.9313 ...
   58.7936    59.6627    60.5381    61.4196    62.3068    63.1994 ...
   64.0969    64.9990    65.9053    66.8155    67.7294    68.6466 ...
   69.5660    70.4879    71.4121    72.3379    73.2651    74.1933 ...
   75.1221    76.0511    76.9800    77.9084    78.8360    79.7624 ...
   80.6872    81.6101    82.5306    83.4486    84.3635    85.2750 ...
   86.1828    87.0865    87.9857    88.8800    89.7692    90.6528 ...
   91.5305    92.4018    93.2666    94.1243    94.9747    95.8173 ...
   96.6518    97.4778    98.2951    99.1031    99.9016   100.6901 ...
  101.4684   102.2360   102.9927   103.7379   104.4714   105.1929 ...
  105.9018   106.5980   107.2810   107.9504   108.6059   109.2471 ...
  109.8737   110.4854   111.0817   111.6622   112.2265   112.7741 ...
  113.3045   113.8175   114.3135   114.7930   115.2567   115.7044 ...
  116.1353   116.5467   116.9348   117.2950   117.6231   117.9164 ...
  118.1747   118.4021   118.6065   118.8002   118.9978   119.2142 ...
  119.4607   119.7405   120.0471   120.3632   120.6635
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_sigma)
assert(isequal( ...
    round(y_sigma(:, 1), 4), [
    0.6200     0.4998     0.4533     0.4544     0.4702     0.4809 ...
    0.4796     0.4660     0.4430     0.4157     0.3916     0.3792 ...
    0.3841     0.4073     0.4442     0.4872     0.5287     0.5626 ...
    0.5848     0.5931     0.5882     0.5752     0.5682     0.5937 ...
    0.6809     0.8531     1.1135     1.4567     1.8725     2.3572 ...
    2.9119     3.5385     4.2404     5.0204     5.8820     6.8287 ...
    7.8647     8.9934    10.2181    11.5437    12.9740    14.5127 ...
   16.1635    17.9336    19.8266    21.8439    23.9965    26.2840 ...
   28.7092    31.2780    33.9947    36.8597    39.8769    43.0535 ...
   46.3922    49.8956    53.5673    57.4111    61.4360    65.6427 ...
   70.0340    74.6131    79.3837    84.3494    89.5189    94.8955 ...
  100.4794   106.2744   112.2840   118.5119   124.9622   131.6397 ...
  138.5543   145.7056   153.0733   160.6370   168.4038   176.4571 ...
  184.9888   194.2655   204.4666   215.3908   225.9925   234.4359 ...
  239.6955   242.7501   245.4546   249.6529   257.2900   270.9229 ...
  295.5803   246.3207   270.1716   297.9389   326.2000   348.0705 ...
  355.5171   346.0088   323.6711   364.1518   317.5463 ...
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 1))
assert(isequal( ...
    round(y_int(:, 1), 4), ...
    [   ...
   48.2580    49.1425    49.9789    50.7852    51.5857    52.3911 ...
   53.2055    54.0313    54.8701    55.7215    56.5819    57.4445 ...
   58.3030    59.1570    60.0118    60.8726    61.7412    62.6168 ...
   63.4975    64.3820    65.2698    66.1600    67.0467    67.9124 ...
   68.7320    69.4979    70.2208    70.9104    71.5661    72.1766 ...
   72.7183    73.1552    73.4638    73.6589    73.7570    73.7604 ...
   73.6658    73.4693    73.1663    72.7524    72.2231    71.5736 ...
   70.7995    69.8961    68.8588    67.6829    66.3638    64.8969 ...
   63.2776    61.5012    59.5630    57.4585    55.1830    52.7319 ...
   50.1005    47.2842    44.2784    41.0783    37.6795    34.0772 ...
   30.2668    26.2436    22.0031    17.5405    12.8513     7.9308 ...
    2.7744    -2.6227    -8.2649   -14.1570   -20.3038   -26.7102 ...
  -33.3808   -40.3189   -47.5244   -54.9956   -62.7377   -70.7764 ...
  -79.1665   -87.9780   -97.2467  -106.9037  -116.7212  -126.3307 ...
 -135.3483  -143.6027  -151.3541  -159.4580  -169.2751  -182.4218 ...
 -200.2917  -223.5319  -251.5451  -282.1725  -311.6885  -335.2776 ...
 -348.0856  -346.6419  -330.0016  -300.1837  -261.7144
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 2))
assert(isequal( ...
    round(y_int(:, 2), 4), ...
    [   ...
   49.7578    50.3793    51.0832    51.8408    52.6258    53.4261 ...
   54.2356    55.0513    55.8724    56.7000    57.5368    58.3869 ...
   59.2545    60.1403    61.0411    61.9522    62.8695    63.7900 ...
   64.7110    65.6309    66.5504    67.4738    68.4103    69.3787 ...
   70.4061    71.5058    72.6689    73.8844    75.1459    76.4515 ...
   77.8013    79.1973    80.6426    82.1395    83.6918    85.3031 ...
   86.9769    88.7193    90.5318    92.4194    94.3864    96.4345 ...
   98.5665   100.7847   103.0912   105.4876   107.9757   110.5573 ...
  113.2341   116.0082   118.8815   121.8561   124.9344   128.1184 ...
  131.4105   134.8130   138.3283   141.9586   145.7064   149.5740 ...
  153.5639   157.6782   161.9196   166.2902   170.7926   175.4291 ...
  180.2020   185.1137   190.1667   195.3633   200.7060   206.1975 ...
  211.8403   217.6352   223.5800   229.6706   235.9101   242.3218 ...
  248.9584   255.8874   263.1426   270.6526   278.1875   285.3766 ...
  291.8335   297.3849   302.2884   307.3977   314.0709   323.9222 ...
  338.3430   357.9781   382.2280   408.9316   434.3610   453.6985 ...
  462.0875   456.0555   434.6549   399.9027   356.3227 ...
]'))


