% Test linear model setup, prediction and update functions
%

clear variables

addpath("yaml")
addpath("plot-utils")

test_dir = "tests";
test_data_dir = "data";


%% Test initialization with data

params = struct();
params.significance = 0.1;

data = struct();
data.Load = [50 100 150]';
data.Power = [35.05 70.18 104.77]';

% Initialize a linear model
[model, vars] = lin_model_setup(data, params);

specific_energy = data.Power ./ data.Load;
assert(isequal(fieldnames(vars), {'significance'}'))
assert(isequal(model.CoefficientNames, {'(Intercept)', 'x1'}));
assert(isequal( ...
    round(model.Coefficients.Estimate, 4), ...
    [0.2800    0.6972]' ...
));
assert(round(1 - model.Rsquared.Adjusted, 5, 'significant') == 3.9992e-05);

% Test predictions with single point
x = 200;
[y_mean, y_sigma, y_int] = lin_model_predict(model, x, vars, params);

assert(round(y_mean, 4) == 139.7200);
assert(isequal(round(y_sigma, 4), 0.2205));
assert(isequal(round(y_int, 4), [137.5938  141.8462]));

% define and test a function handle
f_handle = @(model, x, vars, params) lin_model_predict(model, x, vars, params);
[y_mean, y_sigma, y_int] = f_handle(model, x, vars, params);

assert(round(y_mean, 4) == 139.7200);
assert(isequal(round(y_sigma, 4), 0.2205));
assert(isequal(round(y_int, 4), [137.5938  141.8462]));

% Test again using feval with function name
f_name = "lin_model_predict";
[y_mean, y_sigma, y_int] = builtin('feval', f_name, model, x, vars, params);

assert(round(y_mean, 4) == 139.7200);
assert(isequal(round(y_sigma, 4), 0.2205));
assert(isequal(round(y_int, 4), [137.5938  141.8462]));


%% Test with config file

% Load configuration file
filepath = fullfile(test_dir, test_data_dir, "test_config_lin.yaml");
config = yaml.loadFile(filepath, "ConvertToArray", true);

% Create model objects by running the setup scripts with 
% the pre-defined model data specified in the config struct
models = struct();
model_vars = struct();

% Test results to compare to
coeffs_chk = [
    19.6782 0.5241
    91.1707 0.3901
    69.1626 0.5388
    69.1626 0.5388
    69.1626 0.5388
];

machine_names = string(fieldnames(config.machines))';
for i = 1:numel(machine_names)
    machine = machine_names(i);
    model_name = config.machines.(machine).model;
    training_data = config.training.data.(machine);
    training_data.Load = training_data.Load';
    training_data.Power = training_data.Power';
    assert(numel(training_data.Load) == numel(training_data.Power))
    model_config = config.models.(model_name);

    % Run model setup script
    [model, vars] = feval( ...
        model_config.setup_script, ...
        training_data, ...
        model_config.params ...
    );

    % Check selected model variables and params
    assert(vars.significance == model_config.params.significance)
    %fprintf("%s\n", strjoin(string(model.Coefficients.Estimate), " "))
    assert(isequal( ...
        round(model.Coefficients.Estimate, 4), ...
        coeffs_chk(i, :)' ...
    ))

    % Save for use below
    models.(machine) = model;
    model_vars.(machine) = vars;

end

% Make predictions with one model
machine = "machine_1";
op_limits = config.machines.(machine).op_limits;
model_name = config.machines.(machine).model;
model_config = config.models.(model_name);
x = linspace(op_limits(1), op_limits(2), 101)';
[y_mean, y_sigma, y_int] = lin_model_predict( ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config ...
);

% % Plot predictions and data
% training_data = config.training.data.(machine);
% training_data.Load = training_data.Load';
% training_data.Power = training_data.Power';
% figure(1); clf
% make_statdplot(y_mean, y_int(:, 1), y_int(:, 2), x, training_data.Power, ...
%     training_data.Load, "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs
% Use this command to find these values:
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_mean)
assert(isequal( ...
    round(y_mean, 4), [
   49.0278    49.8873    50.7468    51.6064    52.4659    53.3254 ...
   54.1849    55.0445    55.9040    56.7635    57.6230    58.4826 ...
   59.3421    60.2016    61.0611    61.9207    62.7802    63.6397 ...
   64.4992    65.3588    66.2183    67.0778    67.9373    68.7969 ...
   69.6564    70.5159    71.3754    72.2350    73.0945    73.9540 ...
   74.8135    75.6731    76.5326    77.3921    78.2516    79.1112 ...
   79.9707    80.8302    81.6897    82.5493    83.4088    84.2683 ...
   85.1278    85.9874    86.8469    87.7064    88.5659    89.4255 ...
   90.2850    91.1445    92.0040    92.8636    93.7231    94.5826 ...
   95.4421    96.3017    97.1612    98.0207    98.8802    99.7398 ...
  100.5993   101.4588   102.3183   103.1779   104.0374   104.8969 ...
  105.7564   106.6160   107.4755   108.3350   109.1945   110.0541 ...
  110.9136   111.7731   112.6326   113.4921   114.3517   115.2112 ...
  116.0707   116.9302   117.7898   118.6493   119.5088   120.3683 ...
  121.2279   122.0874   122.9469   123.8064   124.6660   125.5255 ...
  126.3850   127.2445   128.1041   128.9636   129.8231   130.6826 ...
  131.5422   132.4017   133.2612   134.1207   134.9803
]'))
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_sigma)
assert(isequaln(y_sigma, zeros(size(x))));

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 1))
assert(isequaln(round(y_int, 4), nan(size(x, 1), 2)))

% More data points
io_data = [
  145.0000  101.0839
  175.0000  122.2633
  140.0000   97.6366
  205.0000  141.9694
  150.0000  104.5735
  210.0000  144.8131
  120.0000   84.4186
   75.0000   58.6758
   95.0000   69.4629
  170.0000  118.7371
];

% Add one point to training data
training_data = config.training.data.(machine);
training_data.Load = training_data.Load';
training_data.Power = training_data.Power';
training_data.Load = [training_data.Load; io_data(9, 1)];
training_data.Power = [training_data.Power; io_data(9, 2)];

% Test update function (trivial for GPs)
[models.(machine), model_vars.(machine)] = lin_model_update(models.(machine), ...
    training_data, vars, model_config.params);

% Check vars updated
assert(model_vars.(machine).significance == model_config.params.significance)
assert(isequal( ...
    round(models.(machine).Coefficients.Estimate, 4), ...
    [19.6859 0.5240]' ...
));

% Re-do predictions with model
[y_mean, y_sigma, y_int] = lin_model_predict( ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config ...
);

% % Plot predictions and data
% figure(2); clf
% make_statdplot(y_mean, y_int(:, 1), y_int(:, 2), x, training_data.Power', ...
%     training_data.Load', "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs changed
assert(isequal( ...
    round(y_mean, 4), [
   49.0282    49.8875    50.7468    51.6061    52.4654    53.3247 ...
   54.1840    55.0433    55.9026    56.7620    57.6213    58.4806 ...
   59.3399    60.1992    61.0585    61.9178    62.7771    63.6364 ...
   64.4957    65.3551    66.2144    67.0737    67.9330    68.7923 ...
   69.6516    70.5109    71.3702    72.2295    73.0888    73.9481 ...
   74.8075    75.6668    76.5261    77.3854    78.2447    79.1040 ...
   79.9633    80.8226    81.6819    82.5412    83.4006    84.2599 ...
   85.1192    85.9785    86.8378    87.6971    88.5564    89.4157 ...
   90.2750    91.1343    91.9936    92.8530    93.7123    94.5716 ...
   95.4309    96.2902    97.1495    98.0088    98.8681    99.7274 ...
  100.5867   101.4461   102.3054   103.1647   104.0240   104.8833 ...
  105.7426   106.6019   107.4612   108.3205   109.1798   110.0391 ...
  110.8985   111.7578   112.6171   113.4764   114.3357   115.1950 ...
  116.0543   116.9136   117.7729   118.6322   119.4916   120.3509 ...
  121.2102   122.0695   122.9288   123.7881   124.6474   125.5067 ...
  126.3660   127.2253   128.0846   128.9440   129.8033   130.6626 ...
  131.5219   132.3812   133.2405   134.0998   134.9591
]'))
assert(isequal(round(y_sigma, 5, 'significant'), 5.7717e-04 .* ones(size(x))));
assert(isequal( ...
    round(y_int(:, 1), 4), ...
    [   ...
   49.0254    49.8848    50.7442    51.6037    52.4631    53.3225 ...
   54.1818    55.0412    55.9005    56.7599    57.6192    58.4784 ...
   59.3377    60.1970    61.0562    61.9154    62.7746    63.6338 ...
   64.4930    65.3522    66.2113    67.0705    67.9296    68.7888 ...
   69.6479    70.5071    71.3662    72.2254    73.0845    73.9436 ...
   74.8028    75.6619    76.5210    77.3801    78.2393    79.0984 ...
   79.9575    80.8166    81.6758    82.5349    83.3940    84.2531 ...
   85.1122    85.9713    86.8305    87.6896    88.5487    89.4078 ...
   90.2669    91.1260    91.9852    92.8443    93.7034    94.5625 ...
   95.4216    96.2807    97.1398    97.9989    98.8581    99.7172 ...
  100.5763   101.4354   102.2945   103.1536   104.0127   104.8718 ...
  105.7310   106.5901   107.4492   108.3083   109.1674   110.0265 ...
  110.8856   111.7447   112.6038   113.4630   114.3221   115.1812 ...
  116.0403   116.8994   117.7585   118.6176   119.4767   120.3358 ...
  121.1949   122.0541   122.9132   123.7723   124.6314   125.4905 ...
  126.3496   127.2087   128.0678   128.9269   129.7860   130.6452 ...
  131.5043   132.3634   133.2225   134.0816   134.9407
]'))
assert(isequal( ...
    round(y_int(:, 2), 4), ...
    [   ...
   49.0310    49.8902    50.7493    51.6085    52.4678    53.3270 ...
   54.1862    55.0455    55.9048    56.7641    57.6234    58.4827 ...
   59.3421    60.2014    61.0608    61.9202    62.7796    63.6391 ...
   64.4985    65.3579    66.2174    67.0768    67.9363    68.7958 ...
   69.6553    70.5147    71.3742    72.2337    73.0932    73.9527 ...
   74.8121    75.6716    76.5311    77.3906    78.2501    79.1096 ...
   79.9691    80.8286    81.6881    82.5476    83.4071    84.2666 ...
   85.1261    85.9856    86.8451    87.7046    88.5641    89.4236 ...
   90.2831    91.1426    92.0021    92.8616    93.7211    94.5807 ...
   95.4402    96.2997    97.1592    98.0187    98.8782    99.7377 ...
  100.5972   101.4567   102.3162   103.1757   104.0352   104.8947 ...
  105.7542   106.6138   107.4733   108.3328   109.1923   110.0518 ...
  110.9113   111.7708   112.6303   113.4898   114.3493   115.2088 ...
  116.0683   116.9279   117.7874   118.6469   119.5064   120.3659 ...
  121.2254   122.0849   122.9444   123.8039   124.6634   125.5229 ...
  126.3825   127.2420   128.1015   128.9610   129.8205   130.6800 ...
  131.5395   132.3990   133.2585   134.1180   134.9775 ...
]'))
