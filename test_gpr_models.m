% Test GP model setup, prediction and update functions
%

clear variables

addpath("yaml")
addpath("plot-utils")

test_dir = "tests";
test_data_dir = "data";


%% Test with config file

% Load configuration file
filepath = fullfile(test_dir, test_data_dir, "test_config_gpr.yaml");
config = yaml.loadFile(filepath, "ConvertToArray", true);

% Create model objects by running the setup scripts with 
% the pre-defined model data specified in the config struct
models = struct();
model_vars = struct();
for machine = string(fieldnames(config.machines))'
    model_name = config.machines.(machine).model;
    training_data = config.training.data.(machine);
    training_data.Load = training_data.Load';
    training_data.Power = training_data.Power';
    assert(numel(training_data.Load) == numel(training_data.Power))
    model_config = config.models.(model_name);

    % Run model setup script
    [model, vars] = feval( ...
        model_config.setup_script, ...
        training_data, ...
        model_config.params ...
    );

    % Check selected model variables and params
    assert(model.NumObservations == numel(training_data.Load));
    if isfield(model_config.params.fit, 'KernelFunction')
        assert(strcmpi(model.KernelFunction, ...
            model_config.params.fit.KernelFunction))
    end
    if isfield(model_config.params.fit, 'KernelParameters')
        assert(isequal(model.ModelParameters.KernelParameters', ...
            model_config.params.fit.KernelParameters))
    end
    assert(vars.significance == model_config.params.significance)

    % Save for use below
    models.(machine) = model;
    model_vars.(machine) = vars;

end

% Check some more things
model_sigmas = structfun(@(m) m.Sigma, models);
assert(isequal( ...
    round(model_sigmas, 4), ...
    ...[1.6131    0.6234  115.7473  115.7473  115.7473]' ...
    [0.1 0.1 0.1 0.1 0.1]' ...  % when lower bound set
))

% Make predictions with one model
machine = "machine_1";
training_data = config.training.data.(machine);
training_data.Load = training_data.Load';
training_data.Power = training_data.Power';
op_limits = config.machines.(machine).op_limits;
model = config.machines.(machine).model;
model_config = config.models.(model);
x = linspace(op_limits(1), op_limits(2), 101)';
[y_mean, y_sigma, y_int] = gpr_model_predict( ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config ...
);

% % Plot predictions and data
% figure(1); clf
% make_statdplot(y_mean, ci(:, 1), ci(:, 2), x, training_data.Power', ...
%     training_data.Load', "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs
% Use this command to find these values:
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_mean)
assert(isequal( ...
    round(y_mean, 4), [
   49.0278    49.8873    50.7468    51.6064    52.4659    53.3254 ...
   54.1849    55.0445    55.9040    56.7635    57.6230    58.4826 ...
   59.3421    60.2016    61.0611    61.9207    62.7802    63.6397 ...
   64.4992    65.3588    66.2183    67.0778    67.9373    68.7969 ...
   69.6564    70.5159    71.3754    72.2350    73.0945    73.9540 ...
   74.8135    75.6731    76.5326    77.3921    78.2516    79.1112 ...
   79.9707    80.8302    81.6897    82.5493    83.4088    84.2683 ...
   85.1278    85.9874    86.8469    87.7064    88.5659    89.4255 ...
   90.2850    91.1445    92.0040    92.8636    93.7231    94.5826 ...
   95.4421    96.3017    97.1612    98.0207    98.8802    99.7398 ...
  100.5993   101.4588   102.3183   103.1779   104.0374   104.8969 ...
  105.7564   106.6160   107.4755   108.3350   109.1945   110.0541 ...
  110.9136   111.7731   112.6326   113.4921   114.3517   115.2112 ...
  116.0707   116.9302   117.7898   118.6493   119.5088   120.3683 ...
  121.2279   122.0874   122.9469   123.8064   124.6660   125.5255 ...
  126.3850   127.2445   128.1041   128.9636   129.8231   130.6826 ...
  131.5422   132.4017   133.2612   134.1207   134.9803 ...
]'))

% In this example y_sigma = SigmaLowerBound
assert(isequal( ...
    round(y_sigma, 4), ...
    repmat(0.1, 101, 1) ...
))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 1))
assert(isequal( ...
    round(y_int(:, 1), 4), [
   48.8633    49.7228    50.5824    51.4419    52.3014    53.1609 ...
   54.0205    54.8800    55.7395    56.5990    57.4586    58.3181 ...
   59.1776    60.0371    60.8967    61.7562    62.6157    63.4752 ...
   64.3348    65.1943    66.0538    66.9133    67.7729    68.6324 ...
   69.4919    70.3514    71.2110    72.0705    72.9300    73.7895 ...
   74.6491    75.5086    76.3681    77.2276    78.0872    78.9467 ...
   79.8062    80.6657    81.5253    82.3848    83.2443    84.1038 ...
   84.9633    85.8229    86.6824    87.5419    88.4014    89.2610 ...
   90.1205    90.9800    91.8395    92.6991    93.5586    94.4181 ...
   95.2776    96.1372    96.9967    97.8562    98.7157    99.5753 ...
  100.4348   101.2943   102.1538   103.0134   103.8729   104.7324 ...
  105.5919   106.4515   107.3110   108.1705   109.0300   109.8896 ...
  110.7491   111.6086   112.4681   113.3277   114.1872   115.0467 ...
  115.9062   116.7658   117.6253   118.4848   119.3443   120.2039 ...
  121.0634   121.9229   122.7824   123.6420   124.5015   125.3610 ...
  126.2205   127.0801   127.9396   128.7991   129.6586   130.5182 ...
  131.3777   132.2372   133.0967   133.9563   134.8158 ...
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 2))
assert(isequal( ...
    round(y_int(:, 2), 4), [
   49.1923    50.0518    50.9113    51.7709    52.6304    53.4899 ...
   54.3494    55.2090    56.0685    56.9280    57.7875    58.6471 ...
   59.5066    60.3661    61.2256    62.0852    62.9447    63.8042 ...
   64.6637    65.5233    66.3828    67.2423    68.1018    68.9614 ...
   69.8209    70.6804    71.5399    72.3995    73.2590    74.1185 ...
   74.9780    75.8375    76.6971    77.5566    78.4161    79.2756 ...
   80.1352    80.9947    81.8542    82.7137    83.5733    84.4328 ...
   85.2923    86.1518    87.0114    87.8709    88.7304    89.5899 ...
   90.4495    91.3090    92.1685    93.0280    93.8876    94.7471 ...
   95.6066    96.4661    97.3257    98.1852    99.0447    99.9042 ...
  100.7638   101.6233   102.4828   103.3423   104.2019   105.0614 ...
  105.9209   106.7804   107.6400   108.4995   109.3590   110.2185 ...
  111.0781   111.9376   112.7971   113.6566   114.5162   115.3757 ...
  116.2352   117.0947   117.9543   118.8138   119.6733   120.5328 ...
  121.3924   122.2519   123.1114   123.9709   124.8305   125.6900 ...
  126.5495   127.4090   128.2686   129.1281   129.9876   130.8471 ...
  131.7067   132.5662   133.4257   134.2852   135.1448 ...
]'))

% More data points
io_data = [
  145.0000  101.0839
  175.0000  122.2633
  140.0000   97.6366
  205.0000  141.9694
  150.0000  104.5735
  210.0000  144.8131
  120.0000   84.4186
   75.0000   58.6758
   95.0000   69.4629
  170.0000  118.7371
];

% Add one point to training data
training_data.Load = [training_data.Load; io_data(9, 1)];
training_data.Power = [training_data.Power; io_data(9, 2)];

% Test update function (trivial for GPs)
[models.(machine), vars] = gpr_model_update(models.(machine), ...
    training_data, vars, model_config.params);

% Re-do predictions with model
[y_mean, y_sigma, ci] = gpr_model_predict( ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config ...
);

% % Plot predictions and data
% figure(2); clf
% make_statdplot(y_mean, ci(:, 1), ci(:, 2), x, training_data.Power', ...
%     training_data.Load', "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_mean)
assert(isequal( ...
    round(y_mean, 4), ...
    [   ...
   49.0282    49.8875    50.7468    51.6061    52.4654    53.3247 ...
   54.1840    55.0433    55.9026    56.7620    57.6213    58.4806 ...
   59.3399    60.1992    61.0585    61.9178    62.7771    63.6364 ...
   64.4957    65.3551    66.2144    67.0737    67.9330    68.7923 ...
   69.6516    70.5109    71.3702    72.2295    73.0888    73.9481 ...
   74.8075    75.6668    76.5261    77.3854    78.2447    79.1040 ...
   79.9633    80.8226    81.6819    82.5412    83.4006    84.2599 ...
   85.1192    85.9785    86.8378    87.6971    88.5564    89.4157 ...
   90.2750    91.1343    91.9936    92.8530    93.7123    94.5716 ...
   95.4309    96.2902    97.1495    98.0088    98.8681    99.7274 ...
  100.5867   101.4461   102.3054   103.1647   104.0240   104.8833 ...
  105.7426   106.6019   107.4612   108.3205   109.1798   110.0391 ...
  110.8985   111.7578   112.6171   113.4764   114.3357   115.1950 ...
  116.0543   116.9136   117.7729   118.6322   119.4916   120.3509 ...
  121.2102   122.0695   122.9288   123.7881   124.6474   125.5067 ...
  126.3660   127.2253   128.0846   128.9440   129.8033   130.6626 ...
  131.5219   132.3812   133.2405   134.0998   134.9591 ...
]'))

% In this example y_sigma = SigmaLowerBound
assert(isequal( ...
    round(y_sigma, 4), ...
    repmat(0.1, 101, 1) ...
))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 1))
assert(isequal( ...
    round(y_int(:, 1), 4), [
   48.8633    49.7228    50.5824    51.4419    52.3014    53.1609 ...
   54.0205    54.8800    55.7395    56.5990    57.4586    58.3181 ...
   59.1776    60.0371    60.8967    61.7562    62.6157    63.4752 ...
   64.3348    65.1943    66.0538    66.9133    67.7729    68.6324 ...
   69.4919    70.3514    71.2110    72.0705    72.9300    73.7895 ...
   74.6491    75.5086    76.3681    77.2276    78.0872    78.9467 ...
   79.8062    80.6657    81.5253    82.3848    83.2443    84.1038 ...
   84.9633    85.8229    86.6824    87.5419    88.4014    89.2610 ...
   90.1205    90.9800    91.8395    92.6991    93.5586    94.4181 ...
   95.2776    96.1372    96.9967    97.8562    98.7157    99.5753 ...
  100.4348   101.2943   102.1538   103.0134   103.8729   104.7324 ...
  105.5919   106.4515   107.3110   108.1705   109.0300   109.8896 ...
  110.7491   111.6086   112.4681   113.3277   114.1872   115.0467 ...
  115.9062   116.7658   117.6253   118.4848   119.3443   120.2039 ...
  121.0634   121.9229   122.7824   123.6420   124.5015   125.3610 ...
  126.2205   127.0801   127.9396   128.7991   129.6586   130.5182 ...
  131.3777   132.2372   133.0967   133.9563   134.8158 ...
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 2))
assert(isequal( ...
    round(y_int(:, 2), 4), [
   49.1923    50.0518    50.9113    51.7709    52.6304    53.4899 ...
   54.3494    55.2090    56.0685    56.9280    57.7875    58.6471 ...
   59.5066    60.3661    61.2256    62.0852    62.9447    63.8042 ...
   64.6637    65.5233    66.3828    67.2423    68.1018    68.9614 ...
   69.8209    70.6804    71.5399    72.3995    73.2590    74.1185 ...
   74.9780    75.8375    76.6971    77.5566    78.4161    79.2756 ...
   80.1352    80.9947    81.8542    82.7137    83.5733    84.4328 ...
   85.2923    86.1518    87.0114    87.8709    88.7304    89.5899 ...
   90.4495    91.3090    92.1685    93.0280    93.8876    94.7471 ...
   95.6066    96.4661    97.3257    98.1852    99.0447    99.9042 ...
  100.7638   101.6233   102.4828   103.3423   104.2019   105.0614 ...
  105.9209   106.7804   107.6400   108.4995   109.3590   110.2185 ...
  111.0781   111.9376   112.7971   113.6566   114.5162   115.3757 ...
  116.2352   117.0947   117.9543   118.8138   119.6733   120.5328 ...
  121.3924   122.2519   123.1114   123.9709   124.8305   125.6900 ...
  126.5495   127.4090   128.2686   129.1281   129.9876   130.8471 ...
  131.7067   132.5662   133.4257   134.2852   135.1448 ...
]'))
