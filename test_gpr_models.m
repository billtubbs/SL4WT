% Test GP model setup, prediction and update functions
%

clear variables

addpath("yaml")
addpath("plot-utils")

test_dir = "tests";
test_data_dir = "data";


%% Test basic initialization

Load = [50 100 150]';
Power = [35.05 70.18 104.77]';
data = table(Load, Power);

params = struct();
params.predictorNames = "Load";
params.responseNames = "Power";
params.significance = 0.1;

% Initialize a linear model
[model, vars] = gpr_model_setup(data, params);

assert(isa(model, 'RegressionGP'))
assert(isequal(fieldnames(vars), {'significance'}'))
assert(isequal(vars.significance, 0.1))
assert(isequal(round(model.Beta, 4), 64.7764));
assert(isequal(model.KernelFunction, "SquaredExponential"))
assert(isequal( ...
    round(model.KernelInformation.KernelParameters, 4), ...
    [273.6183 112.5763]' ...
))
assert(round(model.LogLikelihood, 4) == -13.6423);

% Test predictions with single point
x = 200;
[y_mean, y_sigma, y_int] = gpr_model_predict(model, x, vars, params);

assert(round(y_mean, 4) == 135.4996);
assert(isequal(round(y_sigma, 4), 2.1672));
assert(isequal(round(y_int, 4), [131.9349  139.0643]));


%% Test initialization with output transform and fit params

Load = [50 100 150]';
Power = [35.05 70.18 104.77]';
data = table(Load, Power);

params = struct();
params.predictorNames = "Load";
params.responseNames = "Power";
params.outputTransform.y = "@(x, y) (y + 0.7).*x";
params.outputTransform.y_inv = "@(x, y) y./x - 0.7";
params.fit.KernelFunction = "SquaredExponential";
params.fit.KernelParameters = [30 0.1];
params.fit.FitMethod = "none";
params.fit.Sigma = 0.02;
params.significance = 0.1;

% Initialize a linear model
[model, vars] = gpr_model_setup(data, params);

assert(isa(model, 'RegressionGP'))
assert(isequal(fieldnames(vars), {'significance', 'outputTransform'}'))
assert(isequal(vars.significance, 0.1))
assert(isequal(round(model.Sigma, 4), params.fit.Sigma));
assert(isequal(round(model.Beta, 6), 0));
assert(isequal(model.KernelFunction, "SquaredExponential"))
assert(all(abs( ...
    model.KernelInformation.KernelParameters ...
    - params.fit.KernelParameters' ...
    ) < 1e-13 ...
))
assert(isempty(model.LogLikelihood));  % empty if model is not fit

% Test predictions at multiple points
op_limits = [50 400];
x = linspace(op_limits(1), op_limits(2), 176)';
[y_mean, y_sigma, y_int] = gpr_model_predict(model, x, vars, params);

% Plot predictions and data
% figure(1); clf
% make_statdplot(y_mean, y_int(:, 1), y_int(:, 2), x, ...
%     data.Power, data.Load, "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

assert(isequal( ...
    round(y_mean(1:50:end), 4), ...
    [   35.0491  104.7819  174.9981  245.0000]' ...
));
assert(isequal( ...
    round(y_sigma(1:50:end), 4), ...
    [   36.3997  109.1990  200.4949  280.6931]' ...
));
assert(isequal( ...
    round(y_int(1:50:end, :), 4), ...
    [ ...
       32.7468   37.3513
       97.8751  111.6886
      133.0627  216.9335
      186.2900  303.7100
    ] ...
));


%% Test with config file

% Load configuration file
filepath = fullfile(test_dir, test_data_dir, "test_config_gpr.yaml");
config = yaml.loadFile(filepath, "ConvertToArray", true);

% Load training data from file
training_data = struct();
for machine = string(fieldnames(config.machines))'
    filename = config.machines.(machine).trainingData;
    training_data.(machine) = readtable(...
        fullfile(test_dir, test_data_dir, filename) ...
    );
end

% Create model objects by running the setup scripts with 
models = struct();
model_vars = struct();
for machine = string(fieldnames(config.machines))'
    model_name = config.machines.(machine).model;

    % Run model setup script
    model_config = config.models.(model_name);
    [model, vars] = feval( ...
        model_config.setupFcn, ...
        training_data.(machine), ...
        model_config.params ...
    );

    % Check selected model variables and params
    data = training_data.(machine);
    assert(model.NumObservations == numel(data.Load));
    assert(model.NumObservations == numel(data.Power));
    if isfield(model_config.params.fit, 'KernelFunction')
        assert(strcmpi(model.KernelFunction, ...
            model_config.params.fit.KernelFunction))
    end
    if isfield(model_config.params.fit, 'KernelParameters')
        assert(isequal(model.ModelParameters.KernelParameters', ...
            model_config.params.fit.KernelParameters))
    end
    assert(vars.significance == model_config.params.significance)

    % Save for use below
    models.(machine) = model;
    model_vars.(machine) = vars;

end

% Check some more things
model_sigmas = structfun(@(m) m.Sigma, models);
assert(isequal( ...
    round(model_sigmas, 4), ...
    [0.1000    0.1000    0.2022    0.2037    0.2010]' ...
))

% Make predictions with one model
machine = "machine_1";
op_limits = config.machines.(machine).params.op_limits;
model = config.machines.(machine).model;
model_config = config.models.(model);
x = linspace(op_limits(1), op_limits(2), 101)';
[y_mean, y_sigma, y_int] = builtin("feval", ...
    model_config.predictFcn, ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config.params ...
);

% % Plot predictions and data
% figure(2); clf
% make_statdplot(y_mean, y_int(:, 1), y_int(:, 2), x, ...
%     training_data.(machine){:, "Power"}, ...
%     training_data.(machine){:, "Load"}, ...
%     "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs
% Use this command to find these values:
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_mean)
assert(isequal( ...
    round(y_mean, 4), [
   49.0645    49.9011    50.7377    51.5743    52.4109    53.2475 ...
   54.0840    54.9206    55.7572    56.5938    57.4304    58.2670 ...
   59.1036    59.9402    60.7767    61.6133    62.4499    63.2865 ...
   64.1231    64.9597    65.7963    66.6329    67.4694    68.3060 ...
   69.1426    69.9792    70.8158    71.6524    72.4890    73.3256 ...
   74.1622    74.9987    75.8353    76.6719    77.5085    78.3451 ...
   79.1817    80.0183    80.8549    81.6914    82.5280    83.3646 ...
   84.2012    85.0378    85.8744    86.7110    87.5476    88.3841 ...
   89.2207    90.0573    90.8939    91.7305    92.5671    93.4037 ...
   94.2403    95.0769    95.9134    96.7500    97.5866    98.4232 ...
   99.2598   100.0964   100.9330   101.7696   102.6061   103.4427 ...
  104.2793   105.1159   105.9525   106.7891   107.6257   108.4623 ...
  109.2988   110.1354   110.9720   111.8086   112.6452   113.4818 ...
  114.3184   115.1550   115.9916   116.8281   117.6647   118.5013 ...
  119.3379   120.1745   121.0111   121.8477   122.6843   123.5208 ...
  124.3574   125.1940   126.0306   126.8672   127.7038   128.5404 ...
  129.3770   130.2136   131.0501   131.8867   132.7233 ...
]'))

% In this example y_sigma = SigmaLowerBound
assert(isequal( ...
    round(y_sigma, 4), ...
    repmat(0.1, 101, 1) ...
))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 1))
assert(isequal( ...
    round(y_int(:, 1), 4), [
   48.9000    49.7366    50.5732    51.4098    52.2464    53.0830 ...
   53.9196    54.7561    55.5927    56.4293    57.2659    58.1025 ...
   58.9391    59.7757    60.6123    61.4488    62.2854    63.1220 ...
   63.9586    64.7952    65.6318    66.4684    67.3050    68.1416 ...
   68.9781    69.8147    70.6513    71.4879    72.3245    73.1611 ...
   73.9977    74.8343    75.6708    76.5074    77.3440    78.1806 ...
   79.0172    79.8538    80.6904    81.5270    82.3635    83.2001 ...
   84.0367    84.8733    85.7099    86.5465    87.3831    88.2197 ...
   89.0563    89.8928    90.7294    91.5660    92.4026    93.2392 ...
   94.0758    94.9124    95.7490    96.5855    97.4221    98.2587 ...
   99.0953    99.9319   100.7685   101.6051   102.4417   103.2782 ...
  104.1148   104.9514   105.7880   106.6246   107.4612   108.2978 ...
  109.1344   109.9710   110.8075   111.6441   112.4807   113.3173 ...
  114.1539   114.9905   115.8271   116.6637   117.5002   118.3368 ...
  119.1734   120.0100   120.8466   121.6832   122.5198   123.3564 ...
  124.1929   125.0295   125.8661   126.7027   127.5393   128.3759 ...
  129.2125   130.0491   130.8857   131.7222   132.5588 ...
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 2))
assert(isequal( ...
    round(y_int(:, 2), 4), [
   49.2290    50.0656    50.9022    51.7388    52.5754    53.4119 ...
   54.2485    55.0851    55.9217    56.7583    57.5949    58.4315 ...
   59.2681    60.1046    60.9412    61.7778    62.6144    63.4510 ...
   64.2876    65.1242    65.9608    66.7973    67.6339    68.4705 ...
   69.3071    70.1437    70.9803    71.8169    72.6535    73.4901 ...
   74.3266    75.1632    75.9998    76.8364    77.6730    78.5096 ...
   79.3462    80.1828    81.0193    81.8559    82.6925    83.5291 ...
   84.3657    85.2023    86.0389    86.8755    87.7120    88.5486 ...
   89.3852    90.2218    91.0584    91.8950    92.7316    93.5682 ...
   94.4048    95.2413    96.0779    96.9145    97.7511    98.5877 ...
   99.4243   100.2609   101.0975   101.9340   102.7706   103.6072 ...
  104.4438   105.2804   106.1170   106.9536   107.7902   108.6267 ...
  109.4633   110.2999   111.1365   111.9731   112.8097   113.6463 ...
  114.4829   115.3195   116.1560   116.9926   117.8292   118.6658 ...
  119.5024   120.3390   121.1756   122.0122   122.8487   123.6853 ...
  124.5219   125.3585   126.1951   127.0317   127.8683   128.7049 ...
  129.5414   130.3780   131.2146   132.0512   132.8878 ...
]'))

% More data points
io_data = array2table([
  145.0000  101.0839
  175.0000  122.2633
  140.0000   97.6366
  205.0000  141.9694
  150.0000  104.5735
  210.0000  144.8131
  120.0000   84.4186
   75.0000   58.6758
   95.0000   69.4629
  170.0000  118.7371
], 'VariableNames', {'Load', 'Power'});

% Add one point to training data
training_data.machine_1 = [
    training_data.(machine);
    io_data(9, :)
];

% Test update function (trivial for GPs)
[models.(machine), vars] = builtin("feval", ...
    model_config.updateFcn, ...
    models.(machine), ...
    training_data.(machine), ...
    vars, ...
    model_config.params);

% Re-do predictions with model
[y_mean, y_sigma, ci] = gpr_model_predict( ...
    models.(machine), ...
    x, ...
    model_vars.(machine), ...
    model_config ...
);

% Plot predictions and data
% figure(3); clf
% make_statdplot(y_mean, y_int(:, 1), y_int(:, 2), x, ...
%     training_data.(machine){:, "Power"}, ...
%     training_data.(machine){:, "Load"}, ...
%     "Load", "Power")
% p = get(gcf, 'Position');
% set(gcf, 'Position', [p(1:2) 320 210])

% Check outputs
% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_mean)
assert(isequal( ...
    round(y_mean, 4), ...
    [   ...
   48.9891    49.8448    50.7005    51.5562    52.4119    53.2676 ...
   54.1233    54.9789    55.8346    56.6903    57.5460    58.4017 ...
   59.2574    60.1131    60.9688    61.8245    62.6802    63.5359 ...
   64.3915    65.2472    66.1029    66.9586    67.8143    68.6700 ...
   69.5257    70.3814    71.2371    72.0928    72.9485    73.8041 ...
   74.6598    75.5155    76.3712    77.2269    78.0826    78.9383 ...
   79.7940    80.6497    81.5054    82.3610    83.2167    84.0724 ...
   84.9281    85.7838    86.6395    87.4952    88.3509    89.2066 ...
   90.0623    90.9180    91.7736    92.6293    93.4850    94.3407 ...
   95.1964    96.0521    96.9078    97.7635    98.6192    99.4749 ...
  100.3306   101.1862   102.0419   102.8976   103.7533   104.6090 ...
  105.4647   106.3204   107.1761   108.0318   108.8875   109.7432 ...
  110.5988   111.4545   112.3102   113.1659   114.0216   114.8773 ...
  115.7330   116.5887   117.4444   118.3001   119.1557   120.0114 ...
  120.8671   121.7228   122.5785   123.4342   124.2899   125.1456 ...
  126.0013   126.8570   127.7127   128.5683   129.4240   130.2797 ...
  131.1354   131.9911   132.8468   133.7025   134.5582 ...
]'))

% In this example y_sigma is the same
assert(isequal( ...
    round(y_sigma, 4), ...
    repmat(0.1294, 101, 1) ...
))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 1))
assert(isequal( ...
    round(y_int(:, 1), 4), [
   48.9000    49.7366    50.5732    51.4098    52.2464    53.0830 ...
   53.9196    54.7561    55.5927    56.4293    57.2659    58.1025 ...
   58.9391    59.7757    60.6123    61.4488    62.2854    63.1220 ...
   63.9586    64.7952    65.6318    66.4684    67.3050    68.1416 ...
   68.9781    69.8147    70.6513    71.4879    72.3245    73.1611 ...
   73.9977    74.8343    75.6708    76.5074    77.3440    78.1806 ...
   79.0172    79.8538    80.6904    81.5270    82.3635    83.2001 ...
   84.0367    84.8733    85.7099    86.5465    87.3831    88.2197 ...
   89.0563    89.8928    90.7294    91.5660    92.4026    93.2392 ...
   94.0758    94.9124    95.7490    96.5855    97.4221    98.2587 ...
   99.0953    99.9319   100.7685   101.6051   102.4417   103.2782 ...
  104.1148   104.9514   105.7880   106.6246   107.4612   108.2978 ...
  109.1344   109.9710   110.8075   111.6441   112.4807   113.3173 ...
  114.1539   114.9905   115.8271   116.6637   117.5002   118.3368 ...
  119.1734   120.0100   120.8466   121.6832   122.5198   123.3564 ...
  124.1929   125.0295   125.8661   126.7027   127.5393   128.3759 ...
  129.2125   130.0491   130.8857   131.7222   132.5588 ...
]'))

% fprintf("%10.4f %10.4f %10.4f %10.4f %10.4f %10.4f ...\n", y_int(:, 2))
assert(isequal( ...
    round(y_int(:, 2), 4), [
   49.2290    50.0656    50.9022    51.7388    52.5754    53.4119 ...
   54.2485    55.0851    55.9217    56.7583    57.5949    58.4315 ...
   59.2681    60.1046    60.9412    61.7778    62.6144    63.4510 ...
   64.2876    65.1242    65.9608    66.7973    67.6339    68.4705 ...
   69.3071    70.1437    70.9803    71.8169    72.6535    73.4901 ...
   74.3266    75.1632    75.9998    76.8364    77.6730    78.5096 ...
   79.3462    80.1828    81.0193    81.8559    82.6925    83.5291 ...
   84.3657    85.2023    86.0389    86.8755    87.7120    88.5486 ...
   89.3852    90.2218    91.0584    91.8950    92.7316    93.5682 ...
   94.4048    95.2413    96.0779    96.9145    97.7511    98.5877 ...
   99.4243   100.2609   101.0975   101.9340   102.7706   103.6072 ...
  104.4438   105.2804   106.1170   106.9536   107.7902   108.6267 ...
  109.4633   110.2999   111.1365   111.9731   112.8097   113.6463 ...
  114.4829   115.3195   116.1560   116.9926   117.8292   118.6658 ...
  119.5024   120.3390   121.1756   122.0122   122.8487   123.6853 ...
  124.5219   125.3585   126.1951   127.0317   127.8683   128.7049 ...
  129.5414   130.3780   131.2146   132.0512   132.8878 ...
]'))
