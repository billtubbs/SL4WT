% Generate GP regression plots for paper
%
% This script produces a figure with three plots
% originally generated by evaluate_models.m and
% selected for the paper.
%

clear variables

addpath("yaml")
addpath("plot-utils")

rng(0)

% Directories
sims_dir = "tests/simulations";
sim_name = "test_sim";
sim_spec_dir = "sim_specs";

plot_dir = "plots";
if ~exist(plot_dir, 'dir')
    mkdir(plot_dir)
end

% Load system configuration from file
filename = "sys_config.yaml";
filespec = fullfile(sims_dir, sim_name, sim_spec_dir, filename);
sys_config = yaml.loadFile(filespec, "ConvertToArray", true);

machine_names = fieldnames(sys_config.equipment)';

% Choose one machine to make plots for
m = 1;
machine = machine_names{m};

% Choose simulations to get optimizer config files from
sim_specs = [
    "test_sim_gpr" ...
    "test_sim_gpr1" ...
    "test_sim_gpr2" ...
];
title_texts = [
    "Uninformed prior" ...
    "Fitted basis function" ...
    "Fixed basis function" ...
];
n_plots = length(sim_specs);


%% Generate training data points

% Number of random experiments
n = 100;

% Number of points to sample for the seed set
n_samples = 3;

% Choose where to sample points (in % of full operating range)
%x_sample_range = [0 1];
%x_sample_range = [0.0 0.2];
x_sample_range = [0.05 0.15];
%x_sample_range = [0.4 0.6];
%x_sample_range = [0.8 1];

% Get machine configuration
machine_config = sys_config.equipment.(machine);

% Measurement noise level
sigma_M = sys_config.equipment.(machine).params.sigma_M;

training_data = cell(1, n);
for j = 1:n

    % Generate training data sets

    % Option 1: Uniform random distribution of load points
    X_sample = machine_config.params.op_limits(1) + (x_sample_range(1) ...
        + rand(1, n_samples)' .* diff(x_sample_range)) ...
            .* diff(machine_config.params.op_limits);
    
    %         % Option 2: evenly spaced linear points
    %         X_sample = machine_config.params.op_limits(1) + (x_sample_range(1) ...
    %             + linspace(0, 1, n_samples)' .* diff(x_sample_range)) ...
    %                 .* diff(machine_config.params.op_limits);
    
    % Sample from machine load-power models (with measurement noise)
    Y_sample = sample_op_pts_poly(X_sample, machine_config.params, sigma_M);

    training_data{j} = array2table( ...
        [X_sample Y_sample], ...
        "VariableNames", {'Load', 'Power'}  ...
    );
end


%% Make figure with subplots

figure(1); clf
tiledlayout(1, n_plots);

% No. of points to sample for validation data set
n_samples_val = 101;

% Choose training data samples to use for each machine
td_ex_selections = struct();
td_ex_selections.machine_1 = 2;
td_ex_selections.machine_2 = 6;
td_ex_selections.machine_3 = 7;
td_ex_selections.machine_4 = 8;
td_ex_selections.machine_5 = 9;

td_ex = td_ex_selections.(machine);
fprintf("Sample points selected: %d\n", td_ex)
disp(sortrows(training_data{td_ex}))

% Generate validation data set (without noise)
X = linspace( ...
    machine_config.params.op_limits(1), ...
    machine_config.params.op_limits(2), ...
    n_samples_val ...
)';
validation_data = array2table( ...
    [X sample_op_pts_poly(X, machine_config.params, 0)], ...
    "VariableNames", {'Load', 'Power'} ...
);

axs = repmat(axes, 1, n_plots);
for i = 1:n_plots
    sim_name = sim_specs(i);

    ax = nexttile;

    % Plot true system output
    x = validation_data.Load;
    plot(x, validation_data.Power, 'k--', 'Linewidth', 1); 
    hold on

    sims_dir = "simulations";  % use opt_configs from main simulations
    filepath = fullfile(sims_dir, sim_name, sim_spec_dir);
    filename = "opt_config.yaml";
    opt_config = yaml.loadFile(fullfile(filepath, filename), ...
        "ConvertToArray", true);

    % Number of random experiments
    n = 100;

    % Choose limits for y-axes of plots
    y_lims = struct;
    y_lims.machine_1 = [20 180];
    y_lims.machine_2 = [160 380];
    y_lims.machine_3 = [100 600];
    y_lims.machine_4 = y_lims.machine_3;
    y_lims.machine_5 = y_lims.machine_3;

    model_name = opt_config.machines.(machine).model;
    model_config = opt_config.models.(model_name);

    predictions = struct();
    predictions.y_mean = nan(n_samples_val, n_samples);

    % Initialize and fit model
    [model, vars] = builtin("feval", ...
        model_config.setupFcn, ...
        training_data{j}, ...
        model_config.params ...
    );

    % Make predictions
    [y_mean, y_sigma, ci] = builtin("feval", ...
        model_config.predictFcn, ...
        model, ...
        validation_data.Load, ...
        vars, ...
        model_config.params ...
    );
    
    % Make plot with confidence intervals
    make_statdplot( ...
        y_mean, ...
        ci(:,2), ...
        ci(:,1), ...
        x, ...
        training_data{td_ex}.Power, ...
        training_data{td_ex}.Load, ...
        'Load (kW)', ...
        {''}, ...
        "prediction", ...
        "CI", ...
        y_lims.(machine) ...
        );
    ylabel('Power (kW)', 'Interpreter', 'latex')
    xlim(machine_config.params.op_limits)
    if i == 1
        legend({'true', 'CI', 'prediction', 'data'})
    else
        set(ax.Legend, 'visible', 'off')
    end
    title_text = sprintf("(%s) %s", char(96+i), title_texts(i));
    title(title_text, 'Interpreter', 'latex')

    axs(i) = ax;

end
linkaxes(axs, 'y')

% Resize plot and save as pdf
set(gcf, 'Units', 'inches');
p = get(gcf, 'Position');
figsize = [9 2.5];
set(gcf, ...
    'Position', [p(1:2) figsize] ...
)
p = get(gcf, 'Position');
filename = sprintf("eval_plot_%s_m%d_%d.pdf", ...
    model_config.name, m, n_plots);
save2pdf(fullfile(plot_dir, filename))

