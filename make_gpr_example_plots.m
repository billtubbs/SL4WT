% Generate GP regression plots for paper
%
% This script produces a figure with three plots
% originally generated by evaluate_models.m and
% selected for the paper.
%

clear variables

addpath("yaml")
addpath("plot-utils")

rng(0)

% Directories
sims_dir = "tests/simulations";
sim_name = "test_sim";
sim_spec_dir = "sim_specs";

plot_dir = "plots";
if ~exist(plot_dir, 'dir')
    mkdir(plot_dir)
end

% Load system configuration from file
filename = "sys_config.yaml";
filespec = fullfile(sims_dir, sim_name, sim_spec_dir, filename);
sys_config = yaml.loadFile(filespec, "ConvertToArray", true);

machine_names = fieldnames(sys_config.equipment)';

% Choose one machine to make plots for
m = 3;
machine = machine_names{m};
machine_config = sys_config.equipment.(machine);

% Choose simulations to get optimizer config files from
sim_specs = [
    "test_sim_lin" ...
    "test_sim_gpr1" ...
    "test_sim_gpr2" ...
    "test_sim_gpr3" ...
];
title_texts = [
    "LR" ...
    "GPR 1" ...
    "GPR 2" ...
    "GPR 3" ...
];
n_opt = length(sim_specs);


%% Training data sets x2

% These data used in test_sim_gpr3
data = [
    243.11    196.37
    265.81    206.33
    281.16    214.46
    371.71    260.62
     445.2    302.43
    484.68    325.83
    500.85     335.5
    196.05    174.55
    474.95    319.63
     479.1    322.31
    480.69    323.17
    481.95    323.79
    482.89    324.65
    483.55    324.83
    683.89    445.81
    197.28    174.97
    309.74    228.88
    752.21     480.2
    399.83    276.34
];
n = 2;
training_data = cell(1, n);

n_samples = 3;
training_data{1} = array2table( ...
    data(1:n_samples, :), ...  % first n samples only
    "VariableNames", ["Load" "Power"] ...
);
training_data{2} = array2table( ...
    data, ...  % all data
    "VariableNames", ["Load" "Power"] ...
);
n_samples = cellfun(@(d) size(d, 1), training_data);


%% Make figures with subplots

n_figs = length(training_data);

for td = 1:n_figs

    figure(td); clf
    tiledlayout(1, n_opt, 'Padding', 'none');
    
    % No. of points to sample for validation data set
    n_samples_val = 101;
    
    fprintf("Sample points selected: %d\n", td)
    disp(sortrows(training_data{td}))
    
    % Generate validation data set (without noise)
    X = linspace( ...
        machine_config.params.op_limits(1), ...
        machine_config.params.op_limits(2), ...
        n_samples_val ...
    )';
    validation_data = array2table( ...
        [X sample_op_pts_poly(X, machine_config.params, 0)], ...
        "VariableNames", {'Load', 'Power'} ...
    );
    
    axs = repmat(axes, 1, n_opt);
    for i = 1:n_opt
        sim_name = sim_specs(i);
    
        ax = nexttile;
    
        % Plot true system output
        x = validation_data.Load;
        plot(x, validation_data.Power, 'k--', 'Linewidth', 1); 
        hold on
    
        sims_dir = "simulations";  % use opt_configs from main simulations
        filepath = fullfile(sims_dir, sim_name, sim_spec_dir);
        filename = "opt_config.yaml";
        opt_config = yaml.loadFile(fullfile(filepath, filename), ...
            "ConvertToArray", true);
    
        % Number of random experiments
        n = 100;
    
        % Choose limits for y-axes of plots
        y_lims = struct;
        y_lims.machine_1 = [20 180];
        y_lims.machine_2 = [160 380];
        y_lims.machine_3 = [100 600];
        y_lims.machine_4 = y_lims.machine_3;
        y_lims.machine_5 = y_lims.machine_3;
    
        model_name = opt_config.machines.(machine).model;
        model_config = opt_config.models.(model_name);
    
        predictions = struct();
        predictions.y_mean = nan(n_samples_val, n_samples(td));
    
        % Initialize and fit model
        [model, vars] = builtin("feval", ...
            model_config.setupFcn, ...
            training_data{td}, ...
            model_config.params ...
        );
    
        % Make predictions
        [y_mean, y_sigma, ci] = builtin("feval", ...
            model_config.predictFcn, ...
            model, ...
            validation_data.Load, ...
            vars, ...
            model_config.params ...
        );
        
        % Make plot with confidence intervals
        make_statdplot( ...
            y_mean, ...
            ci(:,2), ...
            ci(:,1), ...
            x, ...
            training_data{td}.Power, ...
            training_data{td}.Load, ...
            'Load (kW)', ...
            {''}, ...
            "prediction", ...
            "CI", ...
            y_lims.(machine) ...
            );
        if i == 1
            ylabel('Power (kW)', 'Interpreter', 'latex')
        end
        xlim(machine_config.params.op_limits)
        %ylim(y_lims(m, :))
        if (i == 2) && (td == 1)
            legend({'true', 'CI', 'prediction', 'data'})
        else
            set(ax.Legend, 'visible', 'off')
        end
        title_text = sprintf("(%s) %s", char(96+i), title_texts(i));
        title(title_text, 'Interpreter', 'latex')
    
        axs(i) = ax;
    
    end
    linkaxes(axs, 'y')
    
    % Resize plot and save as pdf
    set(gcf, 'Units', 'inches');
    p = get(gcf, 'Position');
    figsize = [n_opt*2+2.5 2.5];
    set(gcf, ...
        'Position', [p(1:2) figsize] ...
    )
    p = get(gcf, 'Position');
    filename = sprintf("eval_plot_%s_m%d_%d_%d.pdf", ...
        model_config.name, m, n_opt, td);
    exportgraphics(gcf, fullfile(plot_dir, filename))
    %save2pdf(fullfile(plot_dir, filename))

end
